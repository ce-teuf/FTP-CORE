#!/usr/bin/env python3
"""
Script de release automatis√© pour FTP_CALCULATOR
G√®re le versioning, la cr√©ation de tags, et la pr√©paration des artefacts
"""

import argparse
import subprocess
import sys
import os
import re
from pathlib import Path
from datetime import datetime
import toml

class ReleaseManager:
    def __init__(self):
        self.project_root = Path(__file__).parent.parent
        self.cargo_toml = self.project_root / "Cargo.toml"
        self.pyproject_toml = self.project_root / "python" / "pyproject.toml"

    def run_command(self, cmd, cwd=None):
        """Ex√©cute une commande shell"""
        cwd = cwd or self.project_root
        print(f"ü§ñ Ex√©cution: {cmd}")
        result = subprocess.run(cmd, shell=True, cwd=cwd, capture_output=True, text=True)
        if result.returncode != 0:
            print(f"‚ùå Erreur: {result.stderr}")
            return False
        print(f"‚úÖ Succ√®s: {result.stdout}")
        return True

    def get_current_version(self):
        """R√©cup√®re la version actuelle depuis Cargo.toml"""
        with open(self.cargo_toml, 'r') as f:
            cargo_data = toml.load(f)

        # Cherche la version dans les membres du workspace
        for member in cargo_data['workspace']['members']:
            member_toml = self.project_root / member / "Cargo.toml"
            if member_toml.exists():
                with open(member_toml, 'r') as f:
                    member_data = toml.load(f)
                    if 'package' in member_data and 'version' in member_data['package']:
                        return member_data['package']['version']

        raise ValueError("Version non trouv√©e dans les Cargo.toml")

    def update_version(self, new_version):
        """Met √† jour la version dans tous les fichiers de configuration"""
        print(f"üì¶ Mise √† jour de la version vers {new_version}")

        # Met √† jour tous les Cargo.toml des crates
        for member in ["ftp_core", "ftp_core_bindings_c", "ftp_core_bindings_pyo3"]:
            crate_toml = self.project_root / "crates" / member / "Cargo.toml"
            if crate_toml.exists():
                with open(crate_toml, 'r') as f:
                    data = toml.load(f)

                if 'package' in data:
                    data['package']['version'] = new_version

                with open(crate_toml, 'w') as f:
                    toml.dump(data, f)
                print(f"‚úÖ {crate_toml} mis √† jour")

        # Met √† jour pyproject.toml Python
        if self.pyproject_toml.exists():
            with open(self.pyproject_toml, 'r') as f:
                data = toml.load(f)

            if 'project' in data:
                data['project']['version'] = new_version
            elif 'tool' in data and 'poetry' in data['tool']:
                data['tool']['poetry']['version'] = new_version

            with open(self.pyproject_toml, 'w') as f:
                toml.dump(data, f)
            print(f"‚úÖ {self.pyproject_toml} mis √† jour")

    def validate_release_readiness(self):
        """Valide que le projet est pr√™t pour une release"""
        print("üîç Validation de l'√©tat du projet...")

        checks = [
            ("Tests", self.run_command("make test.yml")),
            ("Formatage", self.run_command("cargo fmt --all -- --check")),
            ("Linting", self.run_command("cargo clippy --workspace -- -D warnings")),
            ("Build Rust", self.run_command("cargo build --release")),
            ("Build Python", self.run_command("make build-py-bindings")),
        ]

        all_ok = all(success for _, success in checks)

        if not all_ok:
            print("‚ùå Le projet n'est pas pr√™t pour la release")
            return False

        print("‚úÖ Toutes les validations sont pass√©es")
        return True

    def create_git_tag(self, version, message=None):
        """Cr√©e un tag Git pour la release"""
        message = message or f"Release v{version}"

        if not self.run_command(f'git tag -a "v{version}" -m "{message}"'):
            return False

        if not self.run_command("git push --tags"):
            return False

        print(f"‚úÖ Tag v{version} cr√©√© et pouss√©")
        return True

    def generate_changelog(self, version):
        """G√©n√®re un changelog basique (√† am√©liorer selon les besoins)"""
        changelog_file = self.project_root / "CHANGELOG.md"

        # R√©cup√®re les commits depuis le dernier tag
        result = subprocess.run(
            "git log --oneline --no-decorate",
            shell=True, capture_output=True, text=True
        )

        commits = result.stdout.split('\n')[:10]  # 10 derniers commits

        with open(changelog_file, 'r+') as f:
            content = f.read()
            f.seek(0, 0)

            changelog_entry = f"""## v{version} - {datetime.now().strftime('%Y-%m-%d')}

### Nouvelles fonctionnalit√©s
- √Ä compl√©ter

### Corrections
- √Ä compl√©ter

### Modifications
{''.join(f'- {commit}\\n' for commit in commits if commit)}

"""
            f.write(changelog_entry + content)

        print("‚úÖ Changelog mis √† jour")

    def build_release_artifacts(self):
        """Construit tous les artefacts de release"""
        print("üèóÔ∏è  Construction des artefacts de release...")

        artifacts = [
            ("Bindings C", "make build-c-bindings"),
            ("Bindings Python", "make build-py-bindings"),
            ("Documentation", "make build-docs"),
        ]

        for name, cmd in artifacts:
            print(f"üì¶ Construction: {name}")
            if not self.run_command(cmd):
                print(f"‚ùå √âchec de la construction: {name}")
                return False

        print("‚úÖ Tous les artefacts construits")
        return True

    def create_release(self, version, bump_type="patch", dry_run=False):
        """Cr√©e une nouvelle release"""
        print(f"üöÄ Lancement de la release v{version}")

        if dry_run:
            print("üî∂ MODE SIMULATION - Aucune modification ne sera effectu√©e")

        # 1. Validation
        if not self.validate_release_readiness():
            return False

        # 2. Mise √† jour des versions
        if not dry_run:
            self.update_version(version)

        # 3. Construction des artefacts
        if not self.build_release_artifacts():
            return False

        # 4. G√©n√©ration du changelog
        if not dry_run:
            self.generate_changelog(version)

        # 5. Commit des modifications
        if not dry_run:
            if not self.run_command('git add .'):
                return False
            if not self.run_command(f'git commit -m "Release v{version}"'):
                return False

        # 6. Cr√©ation du tag
        if not dry_run:
            if not self.create_git_tag(version):
                return False

        print(f"üéâ Release v{version} cr√©√©e avec succ√®s!")

        # Instructions pour la suite
        print("\nüìã Prochaines √©tapes:")
        print("1. Les workflows GitHub vont d√©clencher la publication automatique")
        print("2. V√©rifier les artefacts sur GitHub Releases")
        print("3. Mettre √† jour la documentation si n√©cessaire")

        return True

    def bump_version(self, current_version, bump_type):
        """Incr√©mente la version selon le type demand√©"""
        major, minor, patch = map(int, current_version.split('.'))

        if bump_type == "major":
            major += 1
            minor = 0
            patch = 0
        elif bump_type == "minor":
            minor += 1
            patch = 0
        else:  # patch
            patch += 1

        return f"{major}.{minor}.{patch}"

def main():
    parser = argparse.ArgumentParser(description="Gestionnaire de releases FTP_CALCULATOR")
    parser.add_argument("action", choices=["version", "prepare", "release", "changelog"],
                        help="Action √† effectuer")
    parser.add_argument("--bump", choices=["major", "minor", "patch"], default="patch",
                        help="Type d'incr√©ment de version (d√©faut: patch)")
    parser.add_argument("--version", help="Version sp√©cifique (au lieu de l'incr√©ment automatique)")
    parser.add_argument("--dry-run", action="store_true",
                        help="Mode simulation (ne fait pas les modifications)")

    args = parser.parse_args()

    manager = ReleaseManager()

    try:
        current_version = manager.get_current_version()
        print(f"üìã Version actuelle: {current_version}")

        if args.action == "version":
            print(f"üè∑Ô∏è  Version actuelle: {current_version}")

        elif args.action == "prepare":
            # Valide juste l'√©tat du projet
            manager.validate_release_readiness()

        elif args.action == "changelog":
            new_version = args.version or manager.bump_version(current_version, args.bump)
            manager.generate_changelog(new_version)

        elif args.action == "release":
            if args.version:
                new_version = args.version
            else:
                new_version = manager.bump_version(current_version, args.bump)

            print(f"üéØ Nouvelle version: {new_version}")

            if not manager.create_release(new_version, args.bump, args.dry_run):
                sys.exit(1)

    except Exception as e:
        print(f"üí• Erreur: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()